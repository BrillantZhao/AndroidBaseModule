apply plugin: 'com.android.application'

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmm')
    return formattedDate
}

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    signingConfigs {
        key {
            keyAlias 'basemodule'
            keyPassword 'basemodule'
            storeFile file('../basemodule.jks')
            storePassword 'basemodule'
        }
    }

    defaultConfig {
        applicationId rootProject.ext.android["applicationId"]
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        versionName APP_VERSION
        resValue("string", 'app_version', APP_VERSION)
        signingConfig signingConfigs.key
    }

    buildTypes {
        release {
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.key
        }
        debug {
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.key
        }
    }

    //解决 Conflict with dependency 'com.google.code.findbugs:jsr305'
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }

    dexOptions {
        javaMaxHeapSize "2g"
    }

    // 解决 is not translated in "zh" ，防止自动打包失败
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    //渠道Flavors
    productFlavors {
        qq {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "qq"]
        }
        zhushou91 {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "zhushou91"]
        }
    }
    allprojects {
        repositories {
            mavenCentral()
            maven { url "https://jitpack.io" }
        }
    }

    //修改生成的apk名字
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def newName
            def timeNow
            def oldFile = output.outputFile
            def outDirectory = oldFile.parent

            if ("true".equals(IS_JENKINS)) {
                timeNow = JENKINS_TIME
                // 使用相对路径，构建后执行的 Execute Windows batch command 脚本为：
                // curl -F "envType=1" -F "prodType=1001" -F "package=@E:\jenkins\workspace\AndroidFilePicker\app\build\outputs\apk\jenkins\filepicker.apk" https://172.16.88.230:8383/apiv1/app/upload --insecure
                outDirectory = outDirectory + '/jenkins'
                // 动态生成安装包名称
//                newName = 'basemodule-v' +
//                        APP_VERSION + '-' + variant.productFlavors[0].name + timeNow + '-' + variant.buildType.name + '.apk'
                // 使用固定的名字，方便jenkins打包完成后自动上传到服务器
                newName = 'basemodule.apk'
            } else {
                timeNow = getDate()
                if (variant.buildType.name.equals('debug')) {
                    newName = "basemodule-v${APP_VERSION}-debug.apk"
                } else {
                    newName = 'basemodule-v' +
                            APP_VERSION + '-' + variant.productFlavors[0].name + timeNow + '-' + variant.buildType.name + '.apk'
                }
            }
            output.outputFile = new File(outDirectory, newName)
        }
    }

}

dependencies {

    //################## 系统级
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile rootProject.ext.dependencies["junit"]

    //################## 引入第三方jar包

    //################## git上第三方库
    //=== Butter Knife
    compile rootProject.ext.dependencies["butterknife"]
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]

    //################## 引用第三方工程
    compile project(':basemodule')
}
